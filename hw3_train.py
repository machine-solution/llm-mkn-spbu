#!/usr/bin/env python3
"""
–î–ó3: –û–±—É—á–µ–Ω–∏–µ —à–∏—Ä–æ–∫–æ–π –∏ –≥–ª—É–±–æ–∫–æ–π –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import time
import psutil
import torch
import subprocess
from pathlib import Path

def run_training(model_config, log_dir, model_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"\n{'='*60}")
    print(f"–ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø: {model_name.upper()}")
    print(f"{'='*60}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs(log_dir, exist_ok=True)
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {log_dir}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ subprocess –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        cmd = [
            "python", "train.py",
            f"model={model_config}",
            f"hydra.run.dir={log_dir}",
            "training=hw3",  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å max_steps=300 –∏ batch_size=32
            f"log_dir={os.path.join(log_dir, 'tb')}"  # –ø–∏—à–µ–º TensorBoard –ª–æ–≥–∏ –≤ –ø–∞–ø–∫—É –∑–∞–ø—É—Å–∫–∞
        ]
        
        print(f"üöÄ –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        print(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥ –æ–±—É—á–µ–Ω–∏—è: training=hw3 (max_steps=300, batch_size=32)")
        print("üìä –†–µ–∞–ª—Ç–∞–π–º –ª–æ–≥–∏ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∏–∂–µ:")
        print("-" * 60)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Å —Ä–µ–∞–ª—Ç–∞–π–º –≤—ã–≤–æ–¥–æ–º
        result = subprocess.run(cmd)
        
        end_time = time.time()
        training_time = end_time - start_time
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø {model_name.upper()}:")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.returncode == 0:
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ (–∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode})")
            
        return {
            'model_name': model_name,
            'training_time': training_time,
            'success': result.returncode == 0,
            'log_dir': log_dir
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return {
            'model_name': model_name,
            'training_time': 0,
            'success': False,
            'log_dir': log_dir
        }

def main():
    print("üéØ –î–ó3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —à–∏—Ä–æ–∫–æ–π –∏ –≥–ª—É–±–æ–∫–æ–π –º–æ–¥–µ–ª–µ–π Llama")
    print("=" * 60)
    print(f"‚öôÔ∏è  –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ training=hw3 (max_steps=300, batch_size=32)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"üñ•Ô∏è  –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
    
    if device == "cuda":
        print(f"üéÆ GPU: {torch.cuda.get_device_name()}")
        print(f"üíæ GPU –ø–∞–º—è—Ç—å: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
    results = []
    
    # 1. –®–∏—Ä–æ–∫–∞—è –º–æ–¥–µ–ª—å
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —à–∏—Ä–æ–∫–æ–π –º–æ–¥–µ–ª–∏...")
    wide_result = run_training(
        model_config="llama_wide",
        log_dir="./logs_hw3/wide_model",
        model_name="–®–∏—Ä–æ–∫–∞—è –º–æ–¥–µ–ª—å"
    )
    results.append(wide_result)
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
        print("üßπ –û—á–∏—â–µ–Ω–∞ GPU –ø–∞–º—è—Ç—å")
    
    # 2. –ì–ª—É–±–æ–∫–∞—è –º–æ–¥–µ–ª—å
    print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π –º–æ–¥–µ–ª–∏...")
    deep_result = run_training(
        model_config="llama_deep", 
        log_dir="./logs_hw3/deep_model",
        model_name="–ì–ª—É–±–æ–∫–∞—è –º–æ–¥–µ–ª—å"
    )
    results.append(deep_result)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print(f"{'='*60}")
    
    for result in results:
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {result['model_name']}:")
        print(f"  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {result['training_time']:.2f} —Å–µ–∫")
        print(f"  –õ–æ–≥–∏: {os.path.join(result['log_dir'], 'tb')}")
        print()

if __name__ == "__main__":
    main()